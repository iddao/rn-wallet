/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MynaWalletInterface extends ethers.utils.Interface {
  functions: {
    "INVOKE_TYPEHASH()": FunctionFragment;
    "initialize((bytes,bytes))": FunctionFragment;
    "invoke((address,uint256,bytes32,bytes),bytes)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "publicKey()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "INVOKE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [{ n: BytesLike; e: BytesLike }]
  ): string;
  encodeFunctionData(
    functionFragment: "invoke",
    values: [
      {
        target: string;
        value: BigNumberish;
        nonce: BytesLike;
        data: BytesLike;
      },
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "publicKey", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "INVOKE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "publicKey", data: BytesLike): Result;

  events: {};
}

export class MynaWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MynaWalletInterface;

  functions: {
    INVOKE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _pubkey: { n: BytesLike; e: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    invoke(
      req: {
        target: string;
        value: BigNumberish;
        nonce: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isValidSignature(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { magicValue: string }>;

    publicKey(
      overrides?: CallOverrides
    ): Promise<[string, string] & { n: string; e: string }>;
  };

  INVOKE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  initialize(
    _pubkey: { n: BytesLike; e: BytesLike },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  invoke(
    req: {
      target: string;
      value: BigNumberish;
      nonce: BytesLike;
      data: BytesLike;
    },
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isValidSignature(
    hash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  publicKey(
    overrides?: CallOverrides
  ): Promise<[string, string] & { n: string; e: string }>;

  callStatic: {
    INVOKE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    initialize(
      _pubkey: { n: BytesLike; e: BytesLike },
      overrides?: CallOverrides
    ): Promise<void>;

    invoke(
      req: {
        target: string;
        value: BigNumberish;
        nonce: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isValidSignature(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    publicKey(
      overrides?: CallOverrides
    ): Promise<[string, string] & { n: string; e: string }>;
  };

  filters: {};

  estimateGas: {
    INVOKE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _pubkey: { n: BytesLike; e: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    invoke(
      req: {
        target: string;
        value: BigNumberish;
        nonce: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isValidSignature(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicKey(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    INVOKE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _pubkey: { n: BytesLike; e: BytesLike },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    invoke(
      req: {
        target: string;
        value: BigNumberish;
        nonce: BytesLike;
        data: BytesLike;
      },
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      hash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
